/*int [] numbers = new int [6]{4,3,5,8,1,9};
            Array.Sort(numbers);
            for(int i = 0; i < 3; i++){
            if (numbers[i] % 2 == 0){
                int []even = new int []
            }
            Array.ForEach(numbers, Console.WriteLine);
 -----------------------------------------------------------------------
             int y;
           //LeapYear obj = new LeapYear();
           Console.WriteLine("Enter the Year in Four Digits : ");
           string x = Console.ReadLine();
           y = int.Parse(x); 

           if((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))
            {
                Console.WriteLine("{0} is a Leap Year", y);
            }
            else
            {
                Console.WriteLine("{0} is not a Leap Year", y);
            } 
 */
/*
----------------------------------------------------------------------------
Rectangle rect1;
        rect1.length = 100;
        rect1.width = 20;
        Console.WriteLine("Area of rect1 {0}", rect1.Area());

        Console.ReadLine();
    }
    struct Rectangle
    {
        public double length;
        public double width;

        public Rectangle(double l = 1, double w = 1)
        {
            width = w;
            length = l;
        }
        public double Area() 
        {
            return length * width;
        } */

/*string uriName = Console.ReadLine();
Uri uriResult;
bool result = Uri.TryCreate(uriName, UriKind.Absolute, out uriResult)
   && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
   */

/*  Console.WriteLine ("Welcome!");
    Console.WriteLine ("Please enter the URL");
    string name = "http://www.";
    name += Console.ReadLine ();
    string path = "";
    Console.WriteLine ("choose a number: 1-(.com) 2-(.net) 3-(.org)");
    int i = Convert.ToInt32 (Console.ReadLine ());
    switch (i) {
        case 1:
            path = ".com";
            break;

        case 2:
            path = ".net";
            break;

        case 3:
            path = ".org";
            break;

        default:
            Console.WriteLine ("No match found!");
            break;
    }

    name += path;
    string urlAddress = name;
    Uri myUri = new Uri (name);
    string host = myUri.Host;

    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (urlAddress);
    HttpWebResponse response = (HttpWebResponse) request.GetResponse ();

    if (response.StatusCode == HttpStatusCode.OK) {
        Stream receiveStream = response.GetResponseStream ();
        StreamReader readStream = null;

        if (response.CharacterSet == null) {
            readStream = new StreamReader (receiveStream);
        } else {
            readStream = new StreamReader (receiveStream, Encoding.GetEncoding (response.CharacterSet));
        }

        string data = readStream.ReadToEnd ();
        Console.WriteLine ("------------------------CODE---------------------------");
        Console.WriteLine (data);

        response.Close ();
        readStream.Close ();
    }
    Console.WriteLine ("Press Enter to exit or R to restart the program.");
    string action = Console.ReadLine ();
    if (action.ToUpper () == "R") {
        Console.Clear ();
        Main ();
    }
    Console.Read ();*/
//**************************************************************************** */
/* Console.WriteLine("Welcome!");
    Console.WriteLine("Type in a word:");
    string word_id = Console.ReadLine ();
    const string lang_code = "en-gb";
    const string fields = "pronunciations";
    const string strictMatch = "false";
    string WEBSERVICE_URL = "https://od-api.oxforddictionaries.com:443/api/v2/entries/" + lang_code + '/' + word_id + "?fields=" + fields + "&strictMatch=" + strictMatch;
    try {
        var webRequest = System.Net.WebRequest.Create (WEBSERVICE_URL);
        if (webRequest != null) {
            webRequest.Method = "GET";
            webRequest.Timeout = 12000;
            webRequest.ContentType = "application/json";
            webRequest.Headers.Add ("app_id", "8f9123c6");
            webRequest.Headers.Add ("app_key", "b137b9c929e843fb33bba167fcb818d7");

            using (System.IO.Stream s = webRequest.GetResponse ().GetResponseStream ()) {
                using (System.IO.StreamReader sr = new System.IO.StreamReader (s)) {
                    var jsonResponse = sr.ReadToEnd ();
                    Console.WriteLine (String.Format ("Response: {0}", jsonResponse));
                }
            }
        }

    } catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
        
    } */
   /*  Console.WriteLine ("Welcome!");
        Console.WriteLine ("Please enter the URL");
        string name = "http://www.";
        name += Console.ReadLine ();
        string path = "";
        Console.WriteLine ("choose a number: 1-(.com) 2-(.net) 3-(.org)");
        int i = Convert.ToInt32 (Console.ReadLine ());
        switch (i) {
            case 1:
                path = ".com";
                break;

            case 2:
                path = ".net";
                break;

            case 3:
                path = ".org";
                break;

            default:
                Console.WriteLine ("No match found!");
                break;
        }

        name += path;
        string urlAddress = name;
        Uri myUri = new Uri (name);
        string host = myUri.Host;

        HttpWebRequest request = (HttpWebRequest) WebRequest.Create (urlAddress);
        HttpWebResponse response = (HttpWebResponse) request.GetResponse ();

        if (response.StatusCode == HttpStatusCode.OK) {
            Stream receiveStream = response.GetResponseStream ();
            StreamReader readStream = null;

            if (response.CharacterSet == null) {
                readStream = new StreamReader (receiveStream);
            } else {
                readStream = new StreamReader (receiveStream, Encoding.GetEncoding (response.CharacterSet));
            }

            string data = readStream.ReadToEnd ();
            Console.WriteLine ("------------------------CODE---------------------------");
            Console.WriteLine (data);

            response.Close ();
            readStream.Close ();
        }
        Console.WriteLine ("Press Enter to exit or R to restart the program.");
        string action = Console.ReadLine ();
        if (action.ToUpper () == "R") {
            Console.Clear ();
            Main ();
        }
        Console.Read ();
        */
        //*****create a new empty asset and put a video from a local file******** 
        /*
        using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Media;
using Microsoft.Azure.Management.Media.Models;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Clients.ActiveDirectory;
using Microsoft.Rest;
using Microsoft.Rest.Azure.Authentication;
using Microsoft.WindowsAzure.Storage.Blob;

namespace ConsoleApp1 {
    class Program {
        private const string InputMP4FileName = @"C:\Users\admin\Desktop\codes\shahidMedia\sample11.mp4.mp4";
        public static async Task Main (string[] args) {
            ConfigWrapper config = new ConfigWrapper (new ConfigurationBuilder ()
                .SetBasePath (Directory.GetCurrentDirectory ())
                .AddJsonFile ("appsettings.json", optional : true, reloadOnChange : true)
                .AddEnvironmentVariables ()
                .Build ());
            try {
                await RunAsync (config);
            } catch (Exception exception) {
                if (exception.Source.Contains ("ActiveDirectory")) {
                    Console.Error.WriteLine ("TIP: Make sure that you have filled out the appsettings.json file before running this sample.");
                }

                Console.Error.WriteLine ($"{exception.Message}");

                ApiErrorException apiException = exception.GetBaseException () as ApiErrorException;
                if (apiException != null) {
                    Console.Error.WriteLine (
                        $"ERROR: API call failed with error code '{apiException.Body.Error.Code}' and message '{apiException.Body.Error.Message}'.");
                }
            }
            Console.WriteLine ("Press Enter to continue.");
            Console.ReadLine ();
        }
        private static async Task RunAsync (ConfigWrapper config) {
            IAzureMediaServicesClient client = await CreateMediaServicesClientAsync (config);

            // Set the polling interval for long running operations to 2 seconds.
            // The default value is 30 seconds for the .NET client SDK
            client.LongRunningOperationRetryTimeout = 2;

            // Creating a unique suffix so that we don't have name collisions if you run the sample
            // multiple times without cleaning up.
            string uniqueness = Guid.NewGuid ().ToString ("N");
            string jobName = $"job-{uniqueness}";
            string locatorName = $"locator-{uniqueness}";
            //string outputAssetName = $"output-{uniqueness}";
            string inputAssetName = $"input-{uniqueness}";

            // Create a new input Asset and upload the specified local video file into it.
            await CreateInputAssetAsync (client, config.ResourceGroup, config.AccountName, inputAssetName, InputMP4FileName);

            // Use the name of the created input asset to create the job input.
            JobInput jobInput = new JobInputAsset (assetName: inputAssetName);

        }
        private static async Task<Asset> CreateInputAssetAsync (
            IAzureMediaServicesClient client,
            string resourceGroupName,
            string accountName,
            string assetName,
            string fileToUpload) {

            Asset asset = await client.Assets.CreateOrUpdateAsync (resourceGroupName, accountName, assetName, new Asset ());

            var response = await client.Assets.ListContainerSasAsync (
                resourceGroupName,
                accountName,
                assetName,
                permissions : AssetContainerPermission.ReadWrite,
                expiryTime : DateTime.UtcNow.AddHours (4).ToUniversalTime ());

            var sasUri = new Uri (response.AssetContainerSasUrls.First ());

            // Use Storage API to get a reference to the Asset container
            // that was created by calling Asset's CreateOrUpdate method.  
            CloudBlobContainer container = new CloudBlobContainer (sasUri);
            var blob = container.GetBlockBlobReference (Path.GetFileName (fileToUpload));

            // Use Strorage API to upload the file into the container in storage.
            await blob.UploadFromFileAsync (fileToUpload);

            return asset;
        }
        private static async Task<IAzureMediaServicesClient> CreateMediaServicesClientAsync (ConfigWrapper config) {
            var credentials = await GetCredentialsAsync (config);

            return new AzureMediaServicesClient (config.ArmEndpoint, credentials) {
                SubscriptionId = config.SubscriptionId,
            };
        }
        private static async Task<Job> SubmitJobAsync (IAzureMediaServicesClient client,
            string resourceGroupName,
            string accountName,
            string transformName,
            string jobName,
            string inputAssetName) {
            // Use the name of the created input asset to create the job input.
            JobInput jobInput = new JobInputAsset (assetName: inputAssetName);

            JobOutput[] jobOutputs = {
                new JobOutputAsset (inputAssetName),
            };

            // In this example, we are assuming that the job name is unique.
            //
            // If you already have a job with the desired name, use the Jobs.Get method
            // to get the existing job. In Media Services v3, the Get method on entities returns null 
            // if the entity doesn't exist (a case-insensitive check on the name).
            Job job = await client.Jobs.CreateAsync (
                resourceGroupName,
                accountName,
                transformName,
                jobName,
                new Job {
                    Input = jobInput,
                        Outputs = jobOutputs,
                });

            return job;
        }
        private static async Task<ServiceClientCredentials> GetCredentialsAsync (ConfigWrapper config) {
            // Use ApplicationTokenProvider.LoginSilentWithCertificateAsync or UserTokenProvider.LoginSilentAsync to get a token using service principal with certificate
            //// ClientAssertionCertificate
            //// ApplicationTokenProvider.LoginSilentWithCertificateAsync

            // Use ApplicationTokenProvider.LoginSilentAsync to get a token using a service principal with symetric key
            ClientCredential clientCredential = new ClientCredential (config.AadClientId, config.AadSecret);
            return await ApplicationTokenProvider.LoginSilentAsync (config.AadTenantId, clientCredential, ActiveDirectoryServiceSettings.Azure);
        }
    }
}
        */
